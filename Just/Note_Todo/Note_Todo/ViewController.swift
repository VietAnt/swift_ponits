//
//  ViewController.swift
//  Note_Todo
//
//  Created by Dux on 19/07/2023.
//

import UIKit

class ViewController: UIViewController {
    
    
    @IBOutlet weak var tableView: UITableView!
    
    @IBOutlet weak var editButton: UIBarButtonItem!
    
    var doneButton : UIBarButtonItem?
    
    var tasks = [Task](){
        didSet{
            self.saveTasks()
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.doneButton = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(doneButtonTap))
        self.doneButton?.tintColor = .darkGray
        self.tableView.dataSource = self
        self.tableView.delegate = self
        self.loadTasks()
    }
    
    //Done_Button
    @objc func doneButtonTap(){
        self.navigationItem.leftBarButtonItem = editButton
        self.tableView.setEditing(false, animated: true)
    }
    
    //Edit_Button
    @IBAction func tapEditButton(_ sender: UIBarButtonItem) {
        guard !self.tasks.isEmpty else { return }
        self.navigationItem.leftBarButtonItem = doneButton
        self.tableView.setEditing(true, animated: true)
    }
    
    //Add_Button
    @IBAction func tapAddButton(_ sender: UIBarButtonItem) {
        //Alert
        let alert = UIAlertController(title: "L√†m g√¨ h√¥m nay? üêú", message: nil, preferredStyle: .alert)
        
        //Register_Button
        let registerButton = UIAlertAction(title: "Yes", style: .default, handler: { [weak self]_ in
            // debugPrint("\(alert.textFields?[0].text)")
            guard let title = alert.textFields?[0].text else { return }
            let task = Task(title: title, done: false)
            self?.tasks.append(task)
            self?.tableView.reloadData()
        })
        
        //Cancel_Button
        let cancelButton = UIAlertAction(title: "No", style: .cancel, handler: nil)
        alert.addAction(cancelButton)
        alert.addAction(registerButton)
        alert.addTextField(configurationHandler: { textField in
            textField.placeholder = "H√£y nh·∫≠p nhi·ªám v·ª• c·ªßa con ki·∫øn.:)"
        })
        self.present(alert, animated: true, completion: nil)
    }
    
    //Save_Tasks
    func saveTasks() {
        let data = self.tasks.map{
            [
                "title": $0.title,
                "done": $0.done
            ]
        }
        let userDefaults = UserDefaults.standard
        userDefaults.set(data, forKey: "tasks")
    }
    
    //Load_Task
    func loadTasks() {
        let userDefaults = UserDefaults.standard
        guard let data = userDefaults.object(forKey: "tasks") as? [[String: Any]] else { return }
        self.tasks = data.compactMap {
            guard let title = $0["title"] as? String else {return nil}
            guard let done = $0["done"] as? Bool else {return nil}
            return Task(title: title, done: done)
        }
    }
}

extension ViewController: UITableViewDataSource {
    // UITableViewDataSource protocol : B·∫°n ph·∫£i x√°c ƒë·ªãnh hai h√†m sau ƒë·ªÉ s·ª≠ d·ª•ng
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // numberOfRowsInSection : S·ªë l∆∞·ª£ng h√†ng ƒë·ªÉ hi·ªÉn th·ªã trong m·ªói ph·∫ßn
        return self.tasks.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        let task = self.tasks[indexPath.row]
        cell.textLabel?.text = task.title
        
        if task.done {
            cell.accessoryType = .checkmark
        } else {
            cell.accessoryType = .none
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        self.tasks.remove(at: indexPath.row)
        tableView.deleteRows(at: [indexPath], with: .automatic)
        
        if self.tasks.isEmpty {
            self.doneButtonTap()
        // Tho√°t kh·ªèi ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi t·∫•t c·∫£ c√°c √¥ b·ªã x√≥a
        }
    }
    
    func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -> Bool {
        return true  // c√≥ th·ªÉ s·∫Øp x·∫øp l·∫°i
    }
    
    func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        // table cell : V·ªõi th·ª© t·ª± ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i n√†y, m·∫£ng l∆∞u tr·ªØ c√°c todos c≈©ng ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i
        var tasks = self.tasks
        let task = tasks[sourceIndexPath.row] // Truy c·∫≠p ƒë∆∞·ªùng d·∫´n ch·ªâ m·ª•c c·ªßa m·ªôt m·∫£ng
        tasks.remove(at: sourceIndexPath.row) // X√≥a vi·ªác c·∫ßn l√†m ban ƒë·∫ßu
        tasks.insert(task, at: destinationIndexPath.row)
        self.tasks = tasks //V∆∞·ª£t qua m·ªôt m·∫£ng ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i.
    }
}

/*
cellForRowAt : M·ªôt h√†m tr·∫£ v·ªÅ c√°c √¥ c·∫ßn thi·∫øt ƒë·ªÉ v·∫Ω h√†ng th·ª© n c·ªßa m·ªôt ph·∫ßn c·ª• th·ªÉ
M·ªôt ph∆∞∆°ng th·ª©c tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng xem b·∫£ng c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng v√† th√™m n√≥ v√†o ch·∫ø ƒë·ªô xem b·∫£ng
T√°i s·ª≠ d·ª•ng √¥ b·∫±ng c√°ch s·ª≠ d·ª•ng h√†ng ƒë·ª£i! T√°i s·ª≠ d·ª•ng ƒë·ªÉ tr√°nh l√£ng ph√≠ b·ªô nh·ªõ
Trong qu√° tr√¨nh cu·ªôn xu·ªëng, 100 tri·ªáu d·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c bi·ªÉu th·ªã trong 5 √¥ th√¥ng qua vi·ªác t√°i s·ª≠ d·ª•ng c√°c √¥
M·ª•c ti√™u s·ª≠ d·ª•ng l·∫°i ƒë∆∞·ª£c t√¨m ki·∫øm th√¥ng qua m√£ ƒë·ªãnh danh withIdentifier v√† vi·ªác s·ª≠ d·ª•ng ƒë∆∞·ª£c ti·∫øp t·ª•c th√¥ng qua indexPath.
 */

extension ViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        var task = self.tasks[indexPath.row]
        task.done = !task.done
        self.tasks[indexPath.row] = task
        self.tableView.reloadRows(at: [indexPath], with: .automatic)
    }
}
